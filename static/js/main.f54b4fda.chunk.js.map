{"version":3,"sources":["helpers/APIkeys.js","helpers/searchAPI.js","components/WeatherCardForSearchCity/WeatherCardForSearchCity.jsx","helpers/notification.js","components/SearchCityInput/SearchCityInput.jsx","components/WeatherCardForCurrentCity/WeatherCardForCurrentCity.js","components/MainPage/MainPage.js","App.js","index.js"],"names":["weatherAPIKey","googleAPIKey","baseWeatherURL","baseGeocoderURL","axiosForecast","coordinates","axios","lat","lon","then","response","kelvinConstant","WeatherCardForSearchCity","weatherProp","forecastProp","name","Math","round","main","temp","feels_like","humidity","pressure","weather","description","daily","map","day","date","moment","Number","dt","format","wind_speed","notification","type","message","title","timeOut","callback","priority","NotificationManager","toLowerCase","SearchCityInput","useState","city","setCityName","isSubmitted","setIsSubmitted","loadedCurrent","setLoadingCurrentWeather","loadedForecast","setLoadingForecast","setWeather","forecast","setForecast","setCoordinates","useEffect","data","onSubmit","event","preventDefault","get","axiosCurrentWeatherByCityName","console","log","axiosLatLonOfSearchCity","coord","results","geometry","location","String","lng","catch","error","status","placeholder","value","onChange","e","target","WeatherCardForCurrentCity","MainPage","latitude","setLatitude","longtitude","setLongtitude","cityFromLocation","setcityFromLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","axiosCurrentCity","address_components","long_name","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f54b4fda.chunk.js","sourcesContent":["const weatherAPIKey = \"8a711f92f9811ab059272b4607202f92\";\r\nconst googleAPIKey = \"AIzaSyAubfp1QYaJqBFGaBVr_PMOzjG70VrB9YU\";\r\n\r\nexport { weatherAPIKey, googleAPIKey };\r\n","import axios from \"axios\";\r\nimport { weatherAPIKey, googleAPIKey } from \"./APIkeys\";\r\n\r\nconst baseWeatherURL = \"https://api.openweathermap.org\";\r\nconst baseGeocoderURL = \"https://maps.googleapis.com/maps/api/geocode\";\r\n\r\nconst axiosCurrentWeather = (lat, lon) => {\r\n  return axios\r\n    .get(\r\n      `${baseWeatherURL}/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${weatherAPIKey}&units=metric`\r\n    )\r\n    .then((response) => response.data);\r\n};\r\n\r\nconst axiosCurrentWeatherByCityName = (city) => {\r\n  return axios\r\n    .get(\r\n      `${baseWeatherURL}/data/2.5/weather?q=${city}&appid=${weatherAPIKey}&units=metric`\r\n    )\r\n    .then((response) => response);\r\n};\r\n\r\nconst axiosCurrentCity = (latitude, longtitude) => {\r\n  return axios(\r\n    `${baseGeocoderURL}/json?latlng=${latitude},${longtitude}&key=${googleAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nconst axiosLatLonOfSearchCity = (city) => {\r\n  return axios(\r\n    `${baseGeocoderURL}/json?address=${city}&key=${googleAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nconst axiosForecast = (coordinates) => {\r\n  return axios(\r\n    `${baseWeatherURL}/data/2.5/onecall?lat=${coordinates.lat}&lon=${coordinates.lon}&exclude=dayli&appid=${weatherAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nexport {\r\n  axiosCurrentWeather,\r\n  axiosCurrentWeatherByCityName,\r\n  axiosLatLonOfSearchCity,\r\n  axiosForecast,\r\n  axiosCurrentCity,\r\n};\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst kelvinConstant = 273.15;\r\n\r\nconst WeatherCardForSearchCity = ({ weatherProp, forecastProp }) => {\r\n  return (\r\n    <>\r\n      <h1>Weather for search city:</h1>\r\n      <p>{weatherProp.name}</p>\r\n      <h2>Todays weather</h2>\r\n      <p>Temperature: {Math.round(weatherProp.main.temp)}</p>\r\n      <p>Feels like: {Math.round(weatherProp.main.feels_like)}</p>\r\n      <p>Humidity: {weatherProp.main.humidity}</p>\r\n      <p>Pressure: {weatherProp.main.pressure}</p>\r\n      <p>Description: {weatherProp.weather[0].description}</p>\r\n      <h1>Forecast</h1>\r\n      {forecastProp.daily.map((day) => {\r\n        const date = moment(Number(`${day.dt}000`)).format(\"dddd D MMM\");\r\n        return (\r\n          <li key={day.dt}>\r\n            <p>day: {date}</p>\r\n            <p>temperature: {Math.round(day.temp.day - kelvinConstant)}</p>\r\n            <p>feels like: {Math.round(day.feels_like.day - kelvinConstant)}</p>\r\n            <p>weather: {day.weather[0].description}</p>\r\n            <p>wind speed: {day.wind_speed}</p>\r\n          </li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCardForSearchCity;\r\n","import { NotificationManager } from \"react-notifications\";\r\n\r\nconst notification = ({\r\n  type,\r\n  message = \"\",\r\n  title = \"\",\r\n  timeOut = 2000,\r\n  callback = () => {},\r\n  priority = false,\r\n}) => {\r\n  return NotificationManager[type.toLowerCase()](\r\n    message,\r\n    title,\r\n    timeOut,\r\n    callback,\r\n    priority\r\n  );\r\n};\r\n\r\nexport default notification;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport {\r\n  axiosCurrentWeatherByCityName,\r\n  axiosForecast,\r\n  axiosLatLonOfSearchCity,\r\n} from \"../../helpers/searchAPI\";\r\n\r\nimport WeatherCardForSearchCity from \"../WeatherCardForSearchCity/WeatherCardForSearchCity\";\r\nimport notification from \"../../helpers/notification\";\r\nimport \"react-notifications/lib/notifications.css\";\r\n\r\nconst SearchCityInput = () => {\r\n  const [city, setCityName] = useState(\"\");\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [loadedCurrent, setLoadingCurrentWeather] = useState(false);\r\n  const [loadedForecast, setLoadingForecast] = useState(false);\r\n  const [weather, setWeather] = useState({});\r\n  const [forecast, setForecast] = useState({});\r\n  const [coordinates, setCoordinates] = useState({});\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setIsSubmitted(true);\r\n\r\n    axiosCurrentWeatherByCityName(city)\r\n      .then((response) => {\r\n        console.log(\"11111\", response.data.name);\r\n        axiosLatLonOfSearchCity(city).then((response) => {\r\n          const coord = response.data.results[0].geometry.location;\r\n          setCoordinates({ lat: String(coord.lat), lon: String(coord.lng) });\r\n        });\r\n        setWeather(response.data);\r\n        setLoadingCurrentWeather(true);\r\n      })\r\n      .catch((error) => {\r\n        if (error.response.status === 404) {\r\n          notification({\r\n            type: \"error\",\r\n            message: \"enter proper name of the city\",\r\n          });\r\n        }\r\n      });\r\n\r\n    setCityName(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (coordinates.lat && coordinates.lon) {\r\n      axiosForecast(coordinates).then((response) => {\r\n        setForecast(response.data);\r\n        setLoadingForecast(true);\r\n      });\r\n    }\r\n  }, [coordinates]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"your city\"\r\n          value={city}\r\n          onChange={(e) => setCityName(e.target.value)}\r\n        />\r\n        <button>ok</button>\r\n      </form>\r\n\r\n      {isSubmitted && (\r\n        <>\r\n          {loadedCurrent && loadedForecast ? (\r\n            <>\r\n              <WeatherCardForSearchCity\r\n                weatherProp={weather}\r\n                forecastProp={forecast}\r\n              />\r\n            </>\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}\r\n        </>\r\n      )}\r\n      <NotificationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchCityInput;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst kelvinConstant = 273.15;\r\n\r\nconst WeatherCardForCurrentCity = ({ weatherProp, forecastProp }) => {\r\n  return (\r\n    <>\r\n      <h2>Weather for your current city:</h2>\r\n      <p>{weatherProp.name}</p>\r\n      <h2>Todays weather</h2>\r\n      <p>Temperature: {Math.round(weatherProp.main.temp)}</p>\r\n      <p>Feels like: {Math.round(weatherProp.main.feels_like)}</p>\r\n      <p>Humidity: {weatherProp.main.humidity}</p>\r\n      <p>Pressure: {weatherProp.main.pressure}</p>\r\n      <p>Description: {weatherProp.weather[0].description}</p>\r\n      <h1>Forecast</h1>\r\n      {forecastProp.daily.map((day) => {\r\n        const date = moment(Number(`${day.dt}000`)).format(\"dddd D MMM\");\r\n        return (\r\n          <li key={day.dt}>\r\n            <p>day: {date}</p>\r\n            <p>temperature: {Math.round(day.temp.day - kelvinConstant)}</p>\r\n            <p>feels like: {Math.round(day.feels_like.day - kelvinConstant)}</p>\r\n            <p>weather: {day.weather[0].description}</p>\r\n            <p>wind speed: {day.wind_speed}</p>\r\n          </li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCardForCurrentCity;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SearchCityInput from \"../SearchCityInput/SearchCityInput\";\r\nimport {\r\n  axiosCurrentCity,\r\n  axiosForecast,\r\n  axiosCurrentWeather,\r\n} from \"../../helpers/searchAPI\";\r\nimport WeatherCardForCurrentCity from \"../WeatherCardForCurrentCity/WeatherCardForCurrentCity\";\r\n\r\nconst MainPage = () => {\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longtitude, setLongtitude] = useState(\"\");\r\n  const [loadedCurrent, setLoadingCurrentWeather] = useState(false);\r\n  const [loadedForecast, setLoadingForecast] = useState(false);\r\n  const [weather, setWeather] = useState({});\r\n  const [cityFromLocation, setcityFromLocation] = useState(\"\");\r\n  const [forecast, setForecast] = useState({});\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const lat = String(position.coords.latitude);\r\n      const lon = String(position.coords.longitude);\r\n      setLatitude(lat);\r\n      setLongtitude(lon);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (latitude && longtitude) {\r\n      axiosCurrentCity(latitude, longtitude).then((response) => {\r\n        setcityFromLocation(\r\n          response.data.results[0].address_components[3].long_name\r\n        );\r\n      });\r\n\r\n      const coordinates = { lat: latitude, lon: longtitude };\r\n      axiosForecast(coordinates).then((response) => {\r\n        setForecast(response.data);\r\n        setLoadingForecast(true);\r\n      });\r\n    }\r\n  }, [latitude, longtitude]);\r\n\r\n  useEffect(() => {\r\n    if (latitude && longtitude) {\r\n      axiosCurrentWeather(latitude, longtitude).then((response) => {\r\n        setWeather(response);\r\n        setLoadingCurrentWeather(true);\r\n      });\r\n    }\r\n  }, [latitude, longtitude]);\r\n\r\n  // console.log(\"weatherCurrent\", weather);\r\n  // console.log(\"forec!!!!\", forecast);\r\n\r\n  return (\r\n    <>\r\n      <p>Your current city: {cityFromLocation}</p>\r\n      <SearchCityInput />\r\n      {loadedCurrent && loadedForecast ? (\r\n        <WeatherCardForCurrentCity\r\n          weatherProp={weather}\r\n          forecastProp={forecast}\r\n        />\r\n      ) : (\r\n        <p>Loading</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport MainPage from \"../src/components/MainPage/MainPage\";\n\nfunction App() {\n  return (\n    <>\n      <MainPage />\n    </>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}