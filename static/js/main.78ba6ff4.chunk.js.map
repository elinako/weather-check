{"version":3,"sources":["components/WeatherCard/WeatherCard.jsx","components/SearchCityInput/SearchCityInput.jsx","helpers/APIkeys.js","components/MainPage/MainPage.js","App.js","index.js"],"names":["WeatherCard","weatherProp","console","log","main","temp","feels_like","humidity","pressure","SearchCityInput","useState","city","setCityName","isSubmitted","setIsSubmitted","weather","setWeather","onSubmit","event","preventDefault","axios","then","response","data","type","placeholder","value","onChange","e","target","LocationDetect","latitude","setLatitude","longtitude","setLongtitude","cityFromLocation","setcityFromLocation","useEffect","navigator","geolocation","getCurrentPosition","position","lat","String","coords","lon","longitude","App","MainPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAeeA,EAZK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAErB,OADAC,QAAQC,IAAI,cAAeF,GAEzB,qCACE,8CAAiBA,EAAYG,KAAKC,QAClC,6CAAgBJ,EAAYG,KAAKE,cACjC,2CAAcL,EAAYG,KAAKG,YAC/B,2CAAcN,EAAYG,KAAKI,gBC6BtBC,EAjCS,WACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAaA,OACE,qCACE,uBAAMC,SAbW,SAACC,GACpBA,EAAMC,iBAENC,IAAM,oDAAD,OACiDT,EADjD,kBCda,mCDcb,kBAEHU,MAAK,SAACC,GACNN,EAAWM,EAASC,MACpBT,GAAe,OAMf,UACE,uBACEU,KAAK,OACLC,YAAY,YACZC,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAAYgB,EAAEC,OAAOH,UAExC,2CAEDb,GAAe,4BAAIF,IACnBE,GAAe,cAAC,EAAD,CAAaZ,YAAac,QEIjCe,EAjCQ,WACrB,MAAgCpB,mBAAS,IAAzC,mBAAOqB,EAAP,KAAiBC,EAAjB,KACA,EAAoCtB,mBAAS,IAA7C,mBAAOuB,EAAP,KAAmBC,EAAnB,KACA,EAAgDxB,mBAAS,IAAzD,mBAAOyB,EAAP,KAAyBC,EAAzB,KAuBA,OArBAC,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,IAAMC,EAAMC,OAAOF,EAASG,OAAOb,UAC7Bc,EAAMF,OAAOF,EAASG,OAAOE,WACnCd,EAAYU,GACZR,EAAcW,QAEf,IAEHR,qBAAU,WACJN,GAAYE,GACdb,IAAM,4DAAD,OACyDW,EADzD,YACqEE,EADrE,gBDpBU,4CCsBbZ,MAAK,SAACC,GACNc,EAAoBd,QAGvB,CAACS,EAAUE,IAEd/B,QAAQC,IAAI,KAAMgC,GAGhB,mCACE,cAAC,EAAD,OCvBSY,MAPf,WACE,OACE,mCACE,cAACC,EAAD,OCFNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.78ba6ff4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst WeatherCard = ({ weatherProp }) => {\r\n  console.log(\"weatherProp\", weatherProp);\r\n  return (\r\n    <>\r\n      <p>Temperature: {weatherProp.main.temp}</p>\r\n      <p>Feels like: {weatherProp.main.feels_like}</p>\r\n      <p>Humidity: {weatherProp.main.humidity}</p>\r\n      <p>Pressure: {weatherProp.main.pressure}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { weatherAPIKey } from \"../../helpers/APIkeys\";\r\nimport axios from \"axios\";\r\n\r\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\r\n\r\nconst SearchCityInput = () => {\r\n  const [city, setCityName] = useState(\"\");\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [weather, setWeather] = useState({});\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    axios(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${weatherAPIKey}&units=metric`\r\n    ).then((response) => {\r\n      setWeather(response.data);\r\n      setIsSubmitted(true);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"your city\"\r\n          value={city}\r\n          onChange={(e) => setCityName(e.target.value)}\r\n        />\r\n        <button>ok</button>\r\n      </form>\r\n      {isSubmitted && <p>{city}</p>}\r\n      {isSubmitted && <WeatherCard weatherProp={weather} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchCityInput;\r\n","const weatherAPIKey = \"8a711f92f9811ab059272b4607202f92\";\r\nconst googleAPIKey = \"AIzaSyAubfp1QYaJqBFGaBVr_PMOzjG70VrB9YU\";\r\n\r\nexport { weatherAPIKey, googleAPIKey };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { googleAPIKey } from \"../../helpers/APIkeys\";\r\nimport SearchCityInput from \"../SearchCityInput/SearchCityInput\";\r\n\r\nconst LocationDetect = () => {\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longtitude, setLongtitude] = useState(\"\");\r\n  const [cityFromLocation, setcityFromLocation] = useState({});\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const lat = String(position.coords.latitude);\r\n      const lon = String(position.coords.longitude);\r\n      setLatitude(lat);\r\n      setLongtitude(lon);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (latitude && longtitude) {\r\n      axios(\r\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longtitude}&key=${googleAPIKey}`\r\n      ).then((response) => {\r\n        setcityFromLocation(response);\r\n      });\r\n    }\r\n  }, [latitude, longtitude]);\r\n\r\n  console.log(\"CL\", cityFromLocation);\r\n\r\n  return (\r\n    <>\r\n      <SearchCityInput />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LocationDetect;\r\n","import React from \"react\";\nimport MainPage from \"../src/components/MainPage/MainPage\";\n\nfunction App() {\n  return (\n    <>\n      <MainPage />\n    </>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}