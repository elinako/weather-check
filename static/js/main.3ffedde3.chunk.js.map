{"version":3,"sources":["helpers/APIkeys.js","helpers/searchAPI.js","components/WeatherCardForSearchCity/WeatherCardForSearchCity.jsx","components/SearchCityInput/SearchCityInput.jsx","components/WeatherCardForCurrentCity/WeatherCardForCurrentCity.js","components/MainPage/MainPage.js","App.js","index.js"],"names":["weatherAPIKey","googleAPIKey","baseWeatherURL","baseGeocoderURL","axiosCurrentWeather","city","axios","get","then","response","data","axiosForecast","coordinates","lat","lon","WeatherCardForSearchCity","weatherProp","forecastProp","console","log","name","main","temp","feels_like","humidity","pressure","weather","description","SearchCityInput","useState","setCityName","isSubmitted","setIsSubmitted","setWeather","forecast","setForecast","setCoordinates","useEffect","onSubmit","event","preventDefault","axiosLatLonOfSearchCity","coord","results","geometry","location","String","lng","type","placeholder","value","onChange","e","target","WeatherCardForCurrentCity","MainPage","latitude","setLatitude","longtitude","setLongtitude","loaded","setLoading","cityFromLocation","setcityFromLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","axiosCurrentCity","address_components","long_name","App","date","Date","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ffedde3.chunk.js","sourcesContent":["const weatherAPIKey = \"c8898de021261a9b94526d13d16434e9\";\r\nconst googleAPIKey = \"AIzaSyAubfp1QYaJqBFGaBVr_PMOzjG70VrB9YU\";\r\n\r\nexport { weatherAPIKey, googleAPIKey };\r\n","import axios from \"axios\";\r\nimport { weatherAPIKey, googleAPIKey } from \"./APIkeys\";\r\n\r\nconst baseWeatherURL = \"https://api.openweathermap.org\";\r\nconst baseGeocoderURL = \"https://maps.googleapis.com/maps/api/geocode\";\r\n\r\nconst axiosCurrentWeather = (city) => {\r\n  return axios\r\n    .get(\r\n      `${baseWeatherURL}/data/2.5/weather?q=${city}&appid=${weatherAPIKey}&units=metric`\r\n    )\r\n    .then((response) => response.data);\r\n};\r\n\r\nconst axiosCurrentCity = (latitude, longtitude) => {\r\n  return axios(\r\n    `${baseGeocoderURL}/json?latlng=${latitude},${longtitude}&key=${googleAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nconst axiosLatLonOfSearchCity = (city) => {\r\n  return axios(\r\n    `${baseGeocoderURL}/json?address=${city}&key=${googleAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nconst axiosForecast = (coordinates) => {\r\n  return axios(\r\n    `${baseWeatherURL}/data/2.5/onecall?lat=${coordinates.lat}&lon=${coordinates.lon}&exclude=dayli&appid=${weatherAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nexport {\r\n  axiosCurrentWeather,\r\n  axiosLatLonOfSearchCity,\r\n  axiosForecast,\r\n  axiosCurrentCity,\r\n};\r\n","import React from \"react\";\r\n\r\nconst WeatherCardForSearchCity = ({ weatherProp, forecastProp }) => {\r\n  console.log(\"forecast\", forecastProp);\r\n  return (\r\n    <>\r\n      <h1>Weather for search city:</h1>\r\n      <p>{weatherProp.name}</p>\r\n      <h2>Todays weather</h2>\r\n      <p>Temperature: {weatherProp.main.temp}</p>\r\n      <p>Feels like: {weatherProp.main.feels_like}</p>\r\n      <p>Humidity: {weatherProp.main.humidity}</p>\r\n      <p>Pressure: {weatherProp.main.pressure}</p>\r\n      <p>Description: {weatherProp.weather[0].description}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCardForSearchCity;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  axiosCurrentWeather,\r\n  axiosForecast,\r\n  axiosLatLonOfSearchCity,\r\n} from \"../../helpers/searchAPI\";\r\n\r\nimport WeatherCardForSearchCity from \"../WeatherCardForSearchCity/WeatherCardForSearchCity\";\r\n\r\nconst SearchCityInput = () => {\r\n  const [city, setCityName] = useState(\"\");\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [weather, setWeather] = useState({});\r\n  const [forecast, setForecast] = useState({});\r\n  const [coordinates, setCoordinates] = useState({});\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    axiosCurrentWeather(city).then((response) => {\r\n      setWeather(response);\r\n      setIsSubmitted(true);\r\n    });\r\n\r\n    axiosLatLonOfSearchCity(city).then((response) => {\r\n      const coord = response.data.results[0].geometry.location;\r\n      setCoordinates({ lat: String(coord.lat), lon: String(coord.lng) });\r\n    });\r\n\r\n    setCityName(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (coordinates.lat && coordinates.lon) {\r\n      axiosForecast(coordinates).then((response) => {\r\n        setForecast(response.data);\r\n      });\r\n    }\r\n  }, [coordinates]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"your city\"\r\n          value={city}\r\n          onChange={(e) => setCityName(e.target.value)}\r\n        />\r\n        <button>ok</button>\r\n      </form>\r\n      {isSubmitted && (\r\n        <WeatherCardForSearchCity\r\n          weatherProp={weather}\r\n          forecastProp={forecast}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchCityInput;\r\n","import React from \"react\";\r\n\r\nconst WeatherCardForCurrentCity = ({ weatherProp, forecastProp }) => {\r\n  console.log(\"forecast\", forecastProp);\r\n  return (\r\n    <>\r\n      <h2>Weather for your current city:</h2>\r\n      <p>{weatherProp.name}</p>\r\n      <h2>Todays weather</h2>\r\n      <p>Temperature: {weatherProp.main.temp}</p>\r\n      <p>Feels like: {weatherProp.main.feels_like}</p>\r\n      <p>Humidity: {weatherProp.main.humidity}</p>\r\n      <p>Pressure: {weatherProp.main.pressure}</p>\r\n      <p>Description: {weatherProp.weather[0].description}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCardForCurrentCity;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SearchCityInput from \"../SearchCityInput/SearchCityInput\";\r\nimport {\r\n  axiosCurrentCity,\r\n  axiosForecast,\r\n  axiosCurrentWeather,\r\n} from \"../../helpers/searchAPI\";\r\nimport WeatherCardForCurrentCity from \"../WeatherCardForCurrentCity/WeatherCardForCurrentCity\";\r\n\r\nconst MainPage = () => {\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longtitude, setLongtitude] = useState(\"\");\r\n  const [loaded, setLoading] = useState(false);\r\n  const [weather, setWeather] = useState({});\r\n  const [cityFromLocation, setcityFromLocation] = useState(\"\");\r\n  const [forecast, setForecast] = useState({});\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const lat = String(position.coords.latitude);\r\n      const lon = String(position.coords.longitude);\r\n      setLatitude(lat);\r\n      setLongtitude(lon);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (latitude && longtitude) {\r\n      axiosCurrentCity(latitude, longtitude).then((response) => {\r\n        setcityFromLocation(\r\n          response.data.results[0].address_components[3].long_name\r\n        );\r\n      });\r\n\r\n      const coordinates = { lat: latitude, lon: longtitude };\r\n      axiosForecast(coordinates).then((response) => {\r\n        setForecast(response.data);\r\n      });\r\n    }\r\n  }, [latitude, longtitude]);\r\n\r\n  useEffect(() => {\r\n    if (cityFromLocation) {\r\n      axiosCurrentWeather(cityFromLocation).then((response) => {\r\n        setWeather(response);\r\n        setLoading(true);\r\n      });\r\n    }\r\n  }, [cityFromLocation]);\r\n\r\n  // console.log(\"weatherCurrent\", weather);\r\n  // console.log(\"forec!!!!\", forecast);\r\n\r\n  return (\r\n    <>\r\n      <p>Your current city: {cityFromLocation}</p>\r\n      <SearchCityInput />\r\n      {loaded ? (\r\n        <WeatherCardForCurrentCity\r\n          weatherProp={weather}\r\n          forecastProp={forecast}\r\n        />\r\n      ) : (\r\n        <p>Loading</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport MainPage from \"../src/components/MainPage/MainPage\";\n\nfunction App() {\n  return (\n    <>\n      <MainPage />\n    </>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst ms = 1620032400000;\n\nconst date = new Date(ms);\n\nconsole.log(\"date\", date.toString());\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}