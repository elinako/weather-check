{"version":3,"sources":["helpers/APIkeys.js","helpers/searchAPI.js","components/WeatherCardForSearchCity/WeatherCardForSearchCity.jsx","helpers/notification.js","helpers/Loader.jsx","components/SearchCityInput/SearchCityInput.jsx","components/WeatherCardForCurrentCity/WeatherCardForCurrentCity.js","components/MainPage/MainPage.js","App.js","index.js"],"names":["weatherAPIKey","googleAPIKey","baseWeatherURL","baseGeocoderURL","axiosForecast","coordinates","axios","lat","lon","then","response","kelvinConstant","WeatherCardForSearchCity","weatherProp","forecastProp","name","Math","round","main","temp","feels_like","humidity","pressure","weather","description","daily","map","day","date","moment","Number","dt","format","wind_speed","notification","type","message","title","timeOut","callback","priority","NotificationManager","toLowerCase","App","color","height","width","timeout","React","Component","SearchCityInput","useState","city","setCityName","isSubmitted","setIsSubmitted","loadedCurrent","setLoadingCurrentWeather","loadedForecast","setLoadingForecast","setWeather","forecast","setForecast","setCoordinates","useEffect","data","onSubmit","event","preventDefault","get","axiosCurrentWeatherByCityName","axiosLatLonOfSearchCity","coord","results","geometry","location","String","lng","catch","error","status","placeholder","value","onChange","e","target","WeatherCardForCurrentCity","MainPage","latitude","setLatitude","longtitude","setLongtitude","cityFromLocation","setcityFromLocation","navigator","geolocation","getCurrentPosition","position","coords","longitude","axiosCurrentCity","address_components","long_name","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc456ad6.chunk.js","sourcesContent":["const weatherAPIKey = \"8a711f92f9811ab059272b4607202f92\";\r\nconst googleAPIKey = \"AIzaSyAubfp1QYaJqBFGaBVr_PMOzjG70VrB9YU\";\r\n\r\nexport { weatherAPIKey, googleAPIKey };\r\n","import axios from \"axios\";\r\nimport { weatherAPIKey, googleAPIKey } from \"./APIkeys\";\r\n\r\nconst baseWeatherURL = \"https://api.openweathermap.org\";\r\nconst baseGeocoderURL = \"https://maps.googleapis.com/maps/api/geocode\";\r\n\r\nconst axiosCurrentWeather = (lat, lon) => {\r\n  return axios\r\n    .get(\r\n      `${baseWeatherURL}/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${weatherAPIKey}&units=metric`\r\n    )\r\n    .then((response) => response.data);\r\n};\r\n\r\nconst axiosCurrentWeatherByCityName = (city) => {\r\n  return axios\r\n    .get(\r\n      `${baseWeatherURL}/data/2.5/weather?q=${city}&appid=${weatherAPIKey}&units=metric`\r\n    )\r\n    .then((response) => response);\r\n};\r\n\r\nconst axiosCurrentCity = (latitude, longtitude) => {\r\n  return axios(\r\n    `${baseGeocoderURL}/json?latlng=${latitude},${longtitude}&key=${googleAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nconst axiosLatLonOfSearchCity = (city) => {\r\n  return axios(\r\n    `${baseGeocoderURL}/json?address=${city}&key=${googleAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nconst axiosForecast = (coordinates) => {\r\n  return axios(\r\n    `${baseWeatherURL}/data/2.5/onecall?lat=${coordinates.lat}&lon=${coordinates.lon}&exclude=dayli&appid=${weatherAPIKey}`\r\n  ).then((response) => response);\r\n};\r\n\r\nexport {\r\n  axiosCurrentWeather,\r\n  axiosCurrentWeatherByCityName,\r\n  axiosLatLonOfSearchCity,\r\n  axiosForecast,\r\n  axiosCurrentCity,\r\n};\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst kelvinConstant = 273.15;\r\n\r\nconst WeatherCardForSearchCity = ({ weatherProp, forecastProp }) => {\r\n  return (\r\n    <>\r\n      <h1>Weather for search city:</h1>\r\n      <p>{weatherProp.name}</p>\r\n      <h2>Todays weather</h2>\r\n      <p>Temperature: {Math.round(weatherProp.main.temp)} &deg;C</p>\r\n      <p>Feels like: {Math.round(weatherProp.main.feels_like)} &deg;C</p>\r\n      <p>Humidity: {weatherProp.main.humidity} %</p>\r\n      <p>Pressure: {weatherProp.main.pressure} mb</p>\r\n      <p>Description: {weatherProp.weather[0].description}</p>\r\n      <h1>Forecast</h1>\r\n      {forecastProp.daily.map((day) => {\r\n        const date = moment(Number(`${day.dt}000`)).format(\"dddd D MMM\");\r\n        return (\r\n          <li key={day.dt}>\r\n            <p>day: {date}</p>\r\n            <p>\r\n              temperature: {Math.round(day.temp.day - kelvinConstant)} &deg;C\r\n            </p>\r\n            <p>\r\n              feels like: {Math.round(day.feels_like.day - kelvinConstant)}{\" \"}\r\n              &deg;C\r\n            </p>\r\n            <p>weather: {day.weather[0].description}</p>\r\n            <p>wind speed: {day.wind_speed} m/s</p>\r\n          </li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCardForSearchCity;\r\n","import { NotificationManager } from \"react-notifications\";\r\n\r\nconst notification = ({\r\n  type,\r\n  message = \"\",\r\n  title = \"\",\r\n  timeOut = 2000,\r\n  callback = () => {},\r\n  priority = false,\r\n}) => {\r\n  return NotificationManager[type.toLowerCase()](\r\n    message,\r\n    title,\r\n    timeOut,\r\n    callback,\r\n    priority\r\n  );\r\n};\r\n\r\nexport default notification;\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Loader\r\n        type=\"TailSpin\"\r\n        color=\"#00BFFF\"\r\n        height={80}\r\n        width={80}\r\n        timeout={3000}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NotificationContainer } from \"react-notifications\";\r\nimport {\r\n  axiosCurrentWeatherByCityName,\r\n  axiosForecast,\r\n  axiosLatLonOfSearchCity,\r\n} from \"../../helpers/searchAPI\";\r\n\r\nimport WeatherCardForSearchCity from \"../WeatherCardForSearchCity/WeatherCardForSearchCity\";\r\nimport notification from \"../../helpers/notification\";\r\nimport Loader from \"../../helpers/Loader\";\r\n\r\nconst SearchCityInput = () => {\r\n  const [city, setCityName] = useState(\"\");\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [loadedCurrent, setLoadingCurrentWeather] = useState(false);\r\n  const [loadedForecast, setLoadingForecast] = useState(false);\r\n  const [weather, setWeather] = useState({});\r\n  const [forecast, setForecast] = useState({});\r\n  const [coordinates, setCoordinates] = useState({});\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setIsSubmitted(true);\r\n\r\n    axiosCurrentWeatherByCityName(city)\r\n      .then((response) => {\r\n        axiosLatLonOfSearchCity(city).then((response) => {\r\n          const coord = response.data.results[0].geometry.location;\r\n          setCoordinates({ lat: String(coord.lat), lon: String(coord.lng) });\r\n        });\r\n        setWeather(response.data);\r\n        setLoadingCurrentWeather(true);\r\n      })\r\n      .catch((error) => {\r\n        switch (error.response.status) {\r\n          case 404:\r\n            notification({\r\n              type: \"warning\",\r\n              message: \"enter proper name of the city\",\r\n            });\r\n            break;\r\n\r\n          case 400:\r\n            notification({\r\n              type: \"warning\",\r\n              message: \"enter the name of the city\",\r\n            });\r\n            break;\r\n\r\n          default:\r\n            return;\r\n        }\r\n      });\r\n\r\n    setCityName(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (coordinates.lat && coordinates.lon) {\r\n      axiosForecast(coordinates).then((response) => {\r\n        setForecast(response.data);\r\n        setLoadingForecast(true);\r\n      });\r\n    }\r\n  }, [coordinates]);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"your city\"\r\n          value={city}\r\n          onChange={(e) => setCityName(e.target.value)}\r\n        />\r\n        <button>ok</button>\r\n      </form>\r\n\r\n      {isSubmitted && (\r\n        <>\r\n          {loadedCurrent && loadedForecast ? (\r\n            <>\r\n              <WeatherCardForSearchCity\r\n                weatherProp={weather}\r\n                forecastProp={forecast}\r\n              />\r\n            </>\r\n          ) : (\r\n            <Loader />\r\n          )}\r\n        </>\r\n      )}\r\n      <NotificationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchCityInput;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst kelvinConstant = 273.15;\r\n\r\nconst WeatherCardForCurrentCity = ({ weatherProp, forecastProp }) => {\r\n  return (\r\n    <>\r\n      <h2>Weather for your current location:</h2>\r\n      <p>{weatherProp.name}</p>\r\n      <h2>Todays weather</h2>\r\n      <p>Temperature: {Math.round(weatherProp.main.temp)} &deg;C</p>\r\n      <p>Feels like: {Math.round(weatherProp.main.feels_like)} &deg;C</p>\r\n      <p>Humidity: {weatherProp.main.humidity} %</p>\r\n      <p>Pressure: {weatherProp.main.pressure} mb</p>\r\n      <p>Description: {weatherProp.weather[0].description}</p>\r\n      <h1>Forecast</h1>\r\n      {forecastProp.daily.map((day) => {\r\n        const date = moment(Number(`${day.dt}000`)).format(\"dddd D MMM\");\r\n        return (\r\n          <li key={day.dt}>\r\n            <p>day: {date}</p>\r\n            <p>\r\n              temperature: {Math.round(day.temp.day - kelvinConstant)} &deg;C\r\n            </p>\r\n            <p>\r\n              feels like: {Math.round(day.feels_like.day - kelvinConstant)}{\" \"}\r\n              &deg;C\r\n            </p>\r\n            <p>weather: {day.weather[0].description}</p>\r\n            <p>wind speed: {day.wind_speed} m/s</p>\r\n          </li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCardForCurrentCity;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SearchCityInput from \"../SearchCityInput/SearchCityInput\";\r\nimport {\r\n  axiosCurrentCity,\r\n  axiosForecast,\r\n  axiosCurrentWeather,\r\n} from \"../../helpers/searchAPI\";\r\nimport WeatherCardForCurrentCity from \"../WeatherCardForCurrentCity/WeatherCardForCurrentCity\";\r\nimport Loader from \"../../helpers/Loader\";\r\n\r\nconst MainPage = () => {\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longtitude, setLongtitude] = useState(\"\");\r\n  const [loadedCurrent, setLoadingCurrentWeather] = useState(false);\r\n  const [loadedForecast, setLoadingForecast] = useState(false);\r\n  const [weather, setWeather] = useState({});\r\n  const [cityFromLocation, setcityFromLocation] = useState(\"\");\r\n  const [forecast, setForecast] = useState({});\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const lat = String(position.coords.latitude);\r\n      const lon = String(position.coords.longitude);\r\n      setLatitude(lat);\r\n      setLongtitude(lon);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (latitude && longtitude) {\r\n      axiosCurrentCity(latitude, longtitude).then((response) => {\r\n        setcityFromLocation(\r\n          response.data.results[0].address_components[3].long_name\r\n        );\r\n      });\r\n\r\n      const coordinates = { lat: latitude, lon: longtitude };\r\n      axiosForecast(coordinates).then((response) => {\r\n        setForecast(response.data);\r\n        setLoadingForecast(true);\r\n      });\r\n    }\r\n  }, [latitude, longtitude]);\r\n\r\n  useEffect(() => {\r\n    if (latitude && longtitude) {\r\n      axiosCurrentWeather(latitude, longtitude).then((response) => {\r\n        setWeather(response);\r\n        setLoadingCurrentWeather(true);\r\n      });\r\n    }\r\n  }, [latitude, longtitude]);\r\n\r\n  return (\r\n    <>\r\n      {!cityFromLocation && (\r\n        <p>Please allow Your current location for correct forecast</p>\r\n      )}\r\n      <p>Your current location: {cityFromLocation}</p>\r\n      <SearchCityInput />\r\n      {loadedCurrent && loadedForecast ? (\r\n        <WeatherCardForCurrentCity\r\n          weatherProp={weather}\r\n          forecastProp={forecast}\r\n        />\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport MainPage from \"../src/components/MainPage/MainPage\";\n\nfunction App() {\n  return (\n    <>\n      <MainPage />\n    </>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"react-notifications/lib/notifications.css\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}